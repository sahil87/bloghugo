<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Httpd on Sahil&#39;s Journal</title>
    <link>http://test.sahil.cc/tags/httpd/</link>
    <description>Recent content in Httpd on Sahil&#39;s Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you likes to quote or reproduce.</copyright>
    <lastBuildDate>Thu, 22 Oct 2009 14:47:13 +0000</lastBuildDate>
    
	<atom:link href="http://test.sahil.cc/tags/httpd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>httpd with SElinux</title>
      <link>http://test.sahil.cc/post/2009/httpd-with-selinux/</link>
      <pubDate>Thu, 22 Oct 2009 14:47:13 +0000</pubDate>
      
      <guid>http://test.sahil.cc/post/2009/httpd-with-selinux/</guid>
      <description>Giving httpd access to other folders (apart from default SElinux allowed folders):
 system-config-selinux rocks!! Go to System-&amp;gt; Administration -&amp;gt; SELinux Management (or system-config-selinux from command line). Type httpd in Filter and press enter. You will see that files that allow httpd write access have the Selinux File Type httpd_cache_t:s0. So.. now you know what to do right? Say you want to give httpd write access to folder /var/lib/dokuwiki/data/cache, then add a new file labelling using the Add button with the following details: File specifications: /var/lib/dokuwiki/data/cache(/.</description>
    </item>
    
    <item>
      <title>LDAP authentication through Apache for svn, trac or anything else for that matter :P</title>
      <link>http://test.sahil.cc/post/2008/ldap-authentication-through-apache-for-svn-trac-or-anything-else-for-that-matter-p/</link>
      <pubDate>Tue, 20 May 2008 02:07:00 +0000</pubDate>
      
      <guid>http://test.sahil.cc/post/2008/ldap-authentication-through-apache-for-svn-trac-or-anything-else-for-that-matter-p/</guid>
      <description>Apache can be used as an access method for things like svn, trac, and even a whole file system through webdav. And apache also supports authentication through LDAP. Hence Apache can be used to authenticate the services that it provides through LDAP.
Here is how it is done :
For SVN :
&amp;lt;VirtualHost *:80&amp;gt; ServerName repos.nitt.edu DocumentRoot &amp;quot;/var/www/svn/DocumentRoot/&amp;quot; ErrorLog logs/repos.nitt.edu-error_log CustomLog logs/repos.nitt.edu-access_log combined &amp;lt;Location /pragyan&amp;gt; DAV svn SVNPath /var/www/svn/pragyan &amp;lt;LimitExcept OPTIONS REPORTGET&amp;gt; AuthType Basic AuthBasicProvider ldap AuthzLDAPAuthoritative off AuthName &amp;quot;Pragyan SVN LDAP Authentication&amp;quot; AuthLDAPURL ldap://localhost:389/ou=Pragyan,dc=www,dc=nitt,dc=edu?</description>
    </item>
    
    <item>
      <title>CrAzY SVN / HTTPD Errors!!! (301, 302 .....)</title>
      <link>http://test.sahil.cc/post/2008/crazy-svn-httpd-errors-301-302/</link>
      <pubDate>Sun, 11 May 2008 14:47:18 +0000</pubDate>
      
      <guid>http://test.sahil.cc/post/2008/crazy-svn-httpd-errors-301-302/</guid>
      <description>Yup.
SVN IS MAD.
Sorry, SVN and HTTPD team up to drive people crazy.
I just came across two (or maybe three) of their misdoing in my effort to setup SVN on http://repos.nitt.edu
1) First, with this nitt.edu.conf in /etc/httpd/conf.d directory :
&amp;lt;VirtualHost *:80&amp;gt; ServerName repos.nitt.edu DocumentRoot &amp;quot;/var/www/html&amp;quot;&amp;lt;/pre&amp;gt; I got an error &amp;lt;pre&amp;gt;&amp;lt;span style=&amp;quot;color:#ff0000;&amp;quot;&amp;gt;RA layer request failed svn: PROPFIND request failed on &#39;/pragyan&#39; svn: PROPFIND of &#39;/pragyan&#39;: 302 Found (http://repos.nitt.edu)&amp;lt;/span&amp;gt;  I found this article : http://ynniv.</description>
    </item>
    
    <item>
      <title>public_html web server - without mod_userdir</title>
      <link>http://test.sahil.cc/post/2008/public-html-web-server-without-mod-userdir/</link>
      <pubDate>Sat, 03 May 2008 08:59:43 +0000</pubDate>
      
      <guid>http://test.sahil.cc/post/2008/public-html-web-server-without-mod-userdir/</guid>
      <description>Hell, what does the title mean??
It means this :
Allow people to put files in the public_html folder in their home directories and allow it to be seen through the web server of that server in this format : http://servername/~username/hisorherfiles
Most people use mod_userdir to allow ~username directories in their webservers. However, there is simple rewrite rule workaround that eliminates the need for mod_userdir. I needed this because we had the home directories on the server, but the users had no login accounts on the server and they needed their public_html to work.</description>
    </item>
    
  </channel>
</rss>